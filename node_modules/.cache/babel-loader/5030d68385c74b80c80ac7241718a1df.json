{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\i5-10400f\\\\Desktop\\\\movies-react\\\\src\\\\components\\\\MovieList\\\\MovieList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './movie-list.scss';\nimport tmdbApi from '../../api/tmdbAPI';\nimport apiConfig from '../../api/APIConfig';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieList = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n      const params = {};\n\n      if (props.type !== 'similar') {\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(props.type, {\n              params\n            });\n            break;\n\n          default:\n            response = await tmdbApi.getTvList(props.type, {\n              params\n            });\n        }\n      } else {\n        response = await tmdbApi.similar(props.category, props.id);\n      }\n\n      setItems(response.results);\n    };\n\n    getList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-list\",\n    children: /*#__PURE__*/_jsxDEV(Swiper, {\n      children: items.map((item, i) => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: apiConfig.w500Image(item.poster_path),\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieList, \"E85yb7BhBnl3/OpymRdjFiQJ97s=\");\n\n_c = MovieList;\nMovieList.propTypes = {\n  category: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired\n};\nexport default MovieList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"sources":["C:/Users/i5-10400f/Desktop/movies-react/src/components/MovieList/MovieList.jsx"],"names":["React","useState","useEffect","PropTypes","tmdbApi","apiConfig","Swiper","SwiperSlide","MovieList","props","items","setItems","getList","response","params","type","category","movie","getMoviesList","getTvList","similar","id","results","map","item","i","w500Image","poster_path","propTypes","string","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,mBAAP;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAAQC,MAAR,EAAgBC,WAAhB,QAAkC,cAAlC;;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAAA;;AAEvB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,OAAO,GAAG,YAAY;AACxB,UAAIC,QAAQ,GAAG,IAAf;AACA,YAAMC,MAAM,GAAG,EAAf;;AACA,UAAGL,KAAK,CAACM,IAAN,KAAe,SAAlB,EAA4B;AACxB,gBAAON,KAAK,CAACO,QAAb;AACI,eAAKA,QAAQ,CAACC,KAAd;AACIJ,YAAAA,QAAQ,GAAG,MAAMT,OAAO,CAACc,aAAR,CAAsBT,KAAK,CAACM,IAA5B,EAAkC;AAACD,cAAAA;AAAD,aAAlC,CAAjB;AACA;;AACA;AACID,YAAAA,QAAQ,GAAG,MAAMT,OAAO,CAACe,SAAR,CAAkBV,KAAK,CAACM,IAAxB,EAA8B;AAACD,cAAAA;AAAD,aAA9B,CAAjB;AALZ;AAOH,OARD,MAQO;AACHD,QAAAA,QAAQ,GAAG,MAAMT,OAAO,CAACgB,OAAR,CAAgBX,KAAK,CAACO,QAAtB,EAAgCP,KAAK,CAACY,EAAtC,CAAjB;AACH;;AACDV,MAAAA,QAAQ,CAACE,QAAQ,CAACS,OAAV,CAAR;AACH,KAfD;;AAgBAV,IAAAA,OAAO;AACV,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACI,QAAC,MAAD;AAAA,gBACCF,KAAK,CAACa,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,kBACP,QAAC,WAAD;AAAA,+BACI;AAAK,UAAA,GAAG,EAAEpB,SAAS,CAACqB,SAAV,CAAoBF,IAAI,CAACG,WAAzB,CAAV;AAAiD,UAAA,GAAG,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA;AADJ,SAAkBF,CAAlB;AAAA;AAAA;AAAA;AAAA,cADH;AADD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAnCD;;GAAMjB,S;;KAAAA,S;AAqCNA,SAAS,CAACoB,SAAV,GAAsB;AAClBZ,EAAAA,QAAQ,EAAEb,SAAS,CAAC0B,MAAV,CAAiBC,UADT;AAElBf,EAAAA,IAAI,EAAEZ,SAAS,CAAC0B,MAAV,CAAiBC;AAFL,CAAtB;AAKA,eAAetB,SAAf","sourcesContent":["import React, { useState, useEffect} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './movie-list.scss'\r\nimport tmdbApi from '../../api/tmdbAPI'\r\nimport apiConfig from '../../api/APIConfig'\r\nimport {Swiper, SwiperSlide} from 'swiper/react'\r\n\r\nconst MovieList = props => {\r\n\r\n    const [items, setItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getList = async () => {\r\n            let response = null;\r\n            const params = {};\r\n            if(props.type !== 'similar'){\r\n                switch(props.category){\r\n                    case category.movie:\r\n                        response = await tmdbApi.getMoviesList(props.type, {params});\r\n                        break;\r\n                        default:\r\n                            response = await tmdbApi.getTvList(props.type, {params});\r\n                }\r\n            } else {\r\n                response = await tmdbApi.similar(props.category, props.id)\r\n            }\r\n            setItems(response.results)\r\n        }\r\n        getList();\r\n    } ,[])\r\n\r\n    return (\r\n        <div className=\"movie-list\">\r\n            <Swiper>\r\n            {items.map((item, i) => (\r\n                <SwiperSlide key={i}>\r\n                    <img src={apiConfig.w500Image(item.poster_path)} alt=\"\" />\r\n                </SwiperSlide>\r\n            ))}\r\n            </Swiper>\r\n        </div>\r\n    )\r\n}\r\n\r\nMovieList.propTypes = {\r\n    category: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default MovieList;\r\n"]},"metadata":{},"sourceType":"module"}