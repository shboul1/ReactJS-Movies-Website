{"ast":null,"code":"import axios from \"axios\";\nimport apiConfig from \"./APIConfig\";\nimport queryString from 'query-string';\nconst axiosClient = axios.create({\n  baseURL: apiConfig.baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  paramsSerializer: params => queryString.stringify({ ...params,\n    api_key: apiConfig.apiKey\n  })\n});\naxiosClient.interceptors.request.use(async config => config);\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n\n  return response;\n}, error => {\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["C:/Users/i5-10400f/Desktop/movies-react/src/api/axiosClient.js"],"names":["axios","apiConfig","queryString","axiosClient","create","baseURL","headers","paramsSerializer","params","stringify","api_key","apiKey","interceptors","request","use","config","response","data","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,MAAMC,WAAW,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAEJ,SAAS,CAACI,OADU;AAE7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GAFoB;AAK7BC,EAAAA,gBAAgB,EAAEC,MAAM,IAAIN,WAAW,CAACO,SAAZ,CAAsB,EAAC,GAAGD,MAAJ;AAAYE,IAAAA,OAAO,EAAET,SAAS,CAACU;AAA/B,GAAtB;AALC,CAAb,CAApB;AAQAR,WAAW,CAACS,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,MAAP,IAAkBA,MAAvD;AACAZ,WAAW,CAACS,YAAZ,CAAyBI,QAAzB,CAAkCF,GAAlC,CAAuCE,QAAD,IAAc;AAChD,MAAGA,QAAQ,IAAIA,QAAQ,CAACC,IAAxB,EAA8B;AAC1B,WAAOD,QAAQ,CAACC,IAAhB;AACH;;AACD,SAAOD,QAAP;AACH,CALD,EAKIE,KAAD,IAAW;AACV,QAAMA,KAAN;AACH,CAPD;AASA,eAAef,WAAf","sourcesContent":["import axios from \"axios\";\r\nimport apiConfig from \"./APIConfig\";\r\nimport queryString from 'query-string'\r\n\r\nconst axiosClient = axios.create({\r\n    baseURL: apiConfig.baseURL,\r\n    headers: {\r\n        \"Content-Type\": \"application/json\"\r\n    },\r\n    paramsSerializer: params => queryString.stringify({...params, api_key: apiConfig.apiKey})\r\n})\r\n\r\naxiosClient.interceptors.request.use(async (config) => config);\r\naxiosClient.interceptors.response.use((response) => {\r\n    if(response && response.data) {\r\n        return response.data\r\n    }\r\n    return response\r\n}, (error) => {\r\n    throw error;\r\n})\r\n\r\nexport default axiosClient;"]},"metadata":{},"sourceType":"module"}