{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\i5-10400f\\\\Desktop\\\\movies-react\\\\src\\\\components\\\\Modal\\\\Modal.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport \"./Modal.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Modal = props => {\n  _s();\n\n  const [active, setActive] = useState(false);\n  useEffect(() => {\n    setActive(props.active);\n  }, [props.active]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `modal ${active ? 'active' : ''}`,\n    id: props.id,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Modal, \"bmG2JTygrN+PZT3BxK5E30OQ5KE=\");\n\n_c = Modal;\nexport const ModalContent = props => {\n  _s2();\n\n  const contentRef = useRef(null);\n\n  const closeModal = () => {\n    contentRef.current.parentNode.classList.remove('active');\n    if (props.onClose) props.onClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: contentRef,\n    className: \"modal__content\",\n    on: true,\n    children: [props.children, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal__content__close\",\n      onClick: closeModal,\n      children: \"aaaa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(ModalContent, \"76RymMQDwORkpkOdsElhIIY+DNc=\");\n\n_c2 = ModalContent;\nModalContent.propTypes = {\n  onClose: PropTypes.func\n};\nModal.propTypes = {\n  active: PropTypes.bool,\n  id: PropTypes.string\n};\nexport default Modal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Modal\");\n$RefreshReg$(_c2, \"ModalContent\");","map":{"version":3,"sources":["C:/Users/i5-10400f/Desktop/movies-react/src/components/Modal/Modal.jsx"],"names":["React","useState","useEffect","useRef","PropTypes","Modal","props","active","setActive","id","children","ModalContent","contentRef","closeModal","current","parentNode","classList","remove","onClose","propTypes","func","bool","string"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,cAAP;;;AAGA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AAAA;;AACnB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,KAAD,CAApC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,SAAS,CAACF,KAAK,CAACC,MAAP,CAAT;AACH,GAFQ,EAEP,CAACD,KAAK,CAACC,MAAP,CAFO,CAAT;AAIA,sBACI;AAAK,IAAA,SAAS,EAAG,SAAQA,MAAM,GAAG,QAAH,GAAc,EAAG,EAAhD;AAAmD,IAAA,EAAE,EAAED,KAAK,CAACG,EAA7D;AAAA,cACKH,KAAK,CAACI;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAXD;;GAAML,K;;KAAAA,K;AAeN,OAAO,MAAMM,YAAY,GAAGL,KAAK,IAAI;AAAA;;AACjC,QAAMM,UAAU,GAAGT,MAAM,CAAC,IAAD,CAAzB;;AACA,QAAMU,UAAU,GAAG,MAAM;AACrBD,IAAAA,UAAU,CAACE,OAAX,CAAmBC,UAAnB,CAA8BC,SAA9B,CAAwCC,MAAxC,CAA+C,QAA/C;AACA,QAAIX,KAAK,CAACY,OAAV,EAAmBZ,KAAK,CAACY,OAAN;AACtB,GAHD;;AAIA,sBACI;AAAK,IAAA,GAAG,EAAEN,UAAV;AAAsB,IAAA,SAAS,EAAC,gBAAhC;AAAiD,IAAA,EAAE,MAAnD;AAAA,eACKN,KAAK,CAACI,QADX,eAEI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAuC,MAAA,OAAO,EAAEG,UAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAdM;;IAAMF,Y;;MAAAA,Y;AAmBbA,YAAY,CAACQ,SAAb,GAAyB;AACrBD,EAAAA,OAAO,EAAEd,SAAS,CAACgB;AADE,CAAzB;AAIAf,KAAK,CAACc,SAAN,GAAkB;AACdZ,EAAAA,MAAM,EAAEH,SAAS,CAACiB,IADJ;AAEdZ,EAAAA,EAAE,EAAEL,SAAS,CAACkB;AAFA,CAAlB;AAMA,eAAejB,KAAf","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport \"./Modal.scss\"\r\n\r\n\r\nconst Modal = props => {\r\n    const [active, setActive] = useState(false);\r\n    useEffect(() => {\r\n        setActive(props.active)\r\n    },[props.active])\r\n\r\n    return (\r\n        <div className={`modal ${active ? 'active' : ''}`} id={props.id}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport const ModalContent = props => {\r\n    const contentRef = useRef(null);\r\n    const closeModal = () => {\r\n        contentRef.current.parentNode.classList.remove('active');\r\n        if (props.onClose) props.onClose();\r\n    }\r\n    return (\r\n        <div ref={contentRef} className='modal__content' on>\r\n            {props.children}\r\n            <div className=\"modal__content__close\" onClick={closeModal}>\r\n                aaaa\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nModalContent.propTypes = {\r\n    onClose: PropTypes.func,\r\n\r\n}\r\nModal.propTypes = {\r\n    active: PropTypes.bool,\r\n    id: PropTypes.string,\r\n}\r\n\r\n\r\nexport default Modal;"]},"metadata":{},"sourceType":"module"}