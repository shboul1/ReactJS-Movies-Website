{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\i5-10400f\\\\Desktop\\\\movies-react\\\\src\\\\components\\\\MoviesGrid\\\\MoviesGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MovieCard from '../MovieCard/MovieCard';\nimport tmdbApi, { movieType, tvType } from '../../api/tmdbAPI';\nimport { useHistory } from 'react-router';\nimport \"./Movies-Grid.scss\";\nimport Button from '../Button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MoviesGrid = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [searchCatg, setSearchCatg] = useState('');\n  const history = useHistory();\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n      const params = {};\n\n      if (props.category === 'movies') {\n        response = await tmdbApi.getMoviesList(movieType.upcoming, {\n          params\n        });\n      } else if (props.category === 'tvseries') {\n        response = await tmdbApi.getTvList(tvType.popular, {\n          params\n        });\n      } else {\n        alert('Page Not Found , 404');\n        history.push('/');\n      }\n\n      setItems(response.results);\n\n      if (props.category === 'movies') {\n        setSearchCatg('movies');\n      } else {\n        setSearchCatg('tv');\n      }\n    };\n\n    getList();\n  }, [props.category]);\n\n  const loadMore = async () => {\n    let response = null;\n    const params = {\n      page: page + 1\n    };\n\n    if (props.category === 'movies') {\n      response = await tmdbApi.getMoviesList(movieType.upcoming, {\n        params\n      });\n    } else {\n      response = await tmdbApi.getTvList(tvType.popular, {\n        params\n      });\n    }\n\n    setItems([...items, ...response.results]);\n    setPage(page + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-search\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search for a movie\",\n        onChange: e => setInputValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-grid mb-3\",\n      children: items && items.filter(itemName => {\n        if (searchCatg === 'movies') {\n          if (inputValue === '') {\n            return itemName;\n          } else if (itemName.title.toLowerCase().includes(inputValue.toLowerCase())) {\n            return itemName;\n          }\n        } else {\n          if (inputValue === '') {\n            return itemName;\n          } else if (itemName.name.toLowerCase().includes(inputValue.toLowerCase())) {\n            return itemName;\n          }\n        }\n      }).map((item, i) => /*#__PURE__*/_jsxDEV(MovieCard, {\n        item: item,\n        category: props.category === 'movies' ? 'movie' : 'tv'\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), page < 500 ? /*#__PURE__*/_jsxDEV(Button, {\n      btnstyle: \"btn--outlined\",\n      onClick: loadMore,\n      children: \"View More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this) : \"\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MoviesGrid, \"24PVWvgtyfYPsf7buKSksogeH8E=\", false, function () {\n  return [useHistory];\n});\n\n_c = MoviesGrid;\nexport default MoviesGrid;\n/* \r\n{items.map((item, i) => (\r\n                <MovieCard  key={i} item={item} category={props.category === 'movies' ? 'movie' : 'tv'} />\r\n            ))}\r\n\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesGrid\");","map":{"version":3,"sources":["C:/Users/i5-10400f/Desktop/movies-react/src/components/MoviesGrid/MoviesGrid.jsx"],"names":["React","useState","useEffect","MovieCard","tmdbApi","movieType","tvType","useHistory","Button","MoviesGrid","props","items","setItems","page","setPage","inputValue","setInputValue","searchCatg","setSearchCatg","history","getList","response","params","category","getMoviesList","upcoming","getTvList","popular","alert","push","results","loadMore","e","target","value","filter","itemName","title","toLowerCase","includes","name","map","item","i"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect} from 'react'\r\nimport MovieCard from '../MovieCard/MovieCard';\r\nimport tmdbApi, {movieType, tvType} from '../../api/tmdbAPI';\r\nimport { useHistory } from 'react-router';\r\nimport \"./Movies-Grid.scss\"\r\nimport Button from '../Button/Button';\r\nconst MoviesGrid = props => {\r\n    const [items, setItems] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const [searchCatg, setSearchCatg] = useState('')\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        const getList = async () => {\r\n            let response = null;\r\n            const params = {};\r\n            if(props.category === 'movies') {\r\n                response = await tmdbApi.getMoviesList(movieType.upcoming, {params})\r\n            } else if (props.category === 'tvseries') {\r\n                response = await tmdbApi.getTvList(tvType.popular, {params})\r\n            } else {\r\n                alert('Page Not Found , 404')\r\n                history.push('/')\r\n            }\r\n            setItems(response.results)\r\n            if(props.category === 'movies') {\r\n                setSearchCatg('movies')\r\n            } else {\r\n                setSearchCatg('tv');\r\n            }\r\n        }\r\n        getList();\r\n    },[props.category])\r\n    const loadMore = async () => {\r\n            let response = null;\r\n            const params = {\r\n                page: page + 1\r\n            };\r\n            if(props.category === 'movies') {\r\n                response = await tmdbApi.getMoviesList(movieType.upcoming, {params})\r\n            } else {\r\n                response = await tmdbApi.getTvList(tvType.popular, {params})\r\n            }\r\n            setItems([...items, ...response.results])\r\n            setPage(page + 1)\r\n    }\r\n    return (\r\n        <div className='section'>\r\n        <div className=\"movie-search\">\r\n            <input type=\"text\" placeholder='Search for a movie' onChange={(e) => setInputValue(e.target.value)} />\r\n        </div>\r\n        <div className='movies-grid mb-3'>\r\n            {items &&\r\n                items.filter(itemName => {\r\n                    if (searchCatg === 'movies') {\r\n                        if(inputValue === '') {\r\n                            return itemName;\r\n                        } else if (itemName.title.toLowerCase().includes(inputValue.toLowerCase())){\r\n                            return itemName\r\n                        }\r\n                    } else {\r\n                        if(inputValue === '') {\r\n                            return itemName;\r\n                        } else if (itemName.name.toLowerCase().includes(inputValue.toLowerCase())){\r\n                            return itemName\r\n                        }\r\n                    }\r\n\r\n                }).map((item, i) => (\r\n                    <MovieCard  key={i} item={item} category={props.category === 'movies' ? 'movie' : 'tv'} />\r\n                ))\r\n            }\r\n        </div>\r\n        { page < 500 ? \r\n            <Button btnstyle='btn--outlined' onClick={loadMore}>View More</Button> : \"\"\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MoviesGrid\r\n\r\n\r\n\r\n/* \r\n{items.map((item, i) => (\r\n                <MovieCard  key={i} item={item} category={props.category === 'movies' ? 'movie' : 'tv'} />\r\n            ))}\r\n\r\n*/ "]},"metadata":{},"sourceType":"module"}