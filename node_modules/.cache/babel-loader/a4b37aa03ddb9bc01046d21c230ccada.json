{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\i5-10400f\\\\Desktop\\\\movies-react\\\\src\\\\components\\\\MoviesGrid\\\\MoviesGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MovieCard from '../MovieCard/MovieCard';\nimport tmdbApi, { movieType, tvType } from '../../api/tmdbAPI';\nimport { useHistory } from 'react-router';\nimport \"./Movies-Grid.scss\";\nimport Button from '../Button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MoviesGrid = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [searchCatg, setSearchCatg] = useState('');\n  const history = useHistory();\n  useEffect(() => {\n    console.log(props.category);\n\n    if (props.category === 'movies' && props.category === 'tvseries') {\n      const getList = async () => {\n        let response = null;\n        const params = {};\n\n        if (props.category === 'movies') {\n          response = await tmdbApi.getMoviesList(movieType.upcoming, {\n            params\n          });\n        } else if (props.category === 'tvseries') {\n          response = await tmdbApi.getTvList(tvType.popular, {\n            params\n          });\n        } else {\n          alert('Page Not Found ...');\n          history.push('/');\n        }\n\n        setItems(response.results);\n\n        if (props.category === 'movies') {\n          setSearchCatg('movies');\n        } else {\n          setSearchCatg('tv');\n        }\n      };\n\n      getList();\n    } else {\n      alert('Page Not Found');\n      history.push('/');\n    }\n  }, [props.category]);\n\n  const loadMore = async () => {\n    let response = null;\n    const params = {\n      page: page + 1\n    };\n\n    if (props.category === 'movies') {\n      response = await tmdbApi.getMoviesList(movieType.upcoming, {\n        params\n      });\n    } else {\n      response = await tmdbApi.getTvList(tvType.popular, {\n        params\n      });\n    }\n\n    setItems([...items, ...response.results]);\n    setPage(page + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-search\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search for a movie\",\n        onChange: e => setInputValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-grid mb-3\",\n      children: items && items.filter(itemName => {\n        if (searchCatg === 'movies') {\n          if (inputValue === '') {\n            return itemName;\n          } else if (itemName.title.toLowerCase().includes(inputValue.toLowerCase())) {\n            return itemName;\n          }\n        } else {\n          if (inputValue === '') {\n            return itemName;\n          } else if (itemName.name.toLowerCase().includes(inputValue.toLowerCase())) {\n            return itemName;\n          }\n        }\n      }).map((item, i) => /*#__PURE__*/_jsxDEV(MovieCard, {\n        item: item,\n        category: props.category === 'movies' ? 'movie' : 'tv'\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), page < 500 ? /*#__PURE__*/_jsxDEV(Button, {\n      btnstyle: \"btn--outlined\",\n      onClick: loadMore,\n      children: \"View More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this) : \"\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MoviesGrid, \"24PVWvgtyfYPsf7buKSksogeH8E=\", false, function () {\n  return [useHistory];\n});\n\n_c = MoviesGrid;\nexport default MoviesGrid;\n/* \r\n{items.map((item, i) => (\r\n                <MovieCard  key={i} item={item} category={props.category === 'movies' ? 'movie' : 'tv'} />\r\n            ))}\r\n\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesGrid\");","map":{"version":3,"sources":["C:/Users/i5-10400f/Desktop/movies-react/src/components/MoviesGrid/MoviesGrid.jsx"],"names":["React","useState","useEffect","MovieCard","tmdbApi","movieType","tvType","useHistory","Button","MoviesGrid","props","items","setItems","page","setPage","inputValue","setInputValue","searchCatg","setSearchCatg","history","console","log","category","getList","response","params","getMoviesList","upcoming","getTvList","popular","alert","push","results","loadMore","e","target","value","filter","itemName","title","toLowerCase","includes","name","map","item","i"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect} from 'react'\r\nimport MovieCard from '../MovieCard/MovieCard';\r\nimport tmdbApi, {movieType, tvType} from '../../api/tmdbAPI';\r\nimport { useHistory } from 'react-router';\r\nimport \"./Movies-Grid.scss\"\r\nimport Button from '../Button/Button';\r\nconst MoviesGrid = props => {\r\n    const [items, setItems] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const [searchCatg, setSearchCatg] = useState('')\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        console.log(props.category)\r\n        if(props.category === 'movies' && props.category === 'tvseries') {\r\n            \r\n            const getList = async () => {\r\n                let response = null;\r\n                const params = {};\r\n                if(props.category === 'movies') {\r\n                    response = await tmdbApi.getMoviesList(movieType.upcoming, {params})\r\n                } else if (props.category === 'tvseries') {\r\n                    response = await tmdbApi.getTvList(tvType.popular, {params})\r\n                } else {\r\n                    alert('Page Not Found ...')\r\n                    history.push('/')\r\n                }\r\n                setItems(response.results)\r\n                if(props.category === 'movies') {\r\n                    setSearchCatg('movies')\r\n                } else {\r\n                    setSearchCatg('tv');\r\n                }\r\n            }\r\n            getList();\r\n        } else {\r\n            alert('Page Not Found')\r\n            history.push('/')\r\n        }\r\n        \r\n    },[props.category])\r\n    const loadMore = async () => {\r\n            let response = null;\r\n            const params = {\r\n                page: page + 1\r\n            };\r\n            if(props.category === 'movies') {\r\n                response = await tmdbApi.getMoviesList(movieType.upcoming, {params})\r\n            } else {\r\n                response = await tmdbApi.getTvList(tvType.popular, {params})\r\n            }\r\n            setItems([...items, ...response.results])\r\n            setPage(page + 1)\r\n    }\r\n    return (\r\n        <div className='section'>\r\n        <div className=\"movie-search\">\r\n            <input type=\"text\" placeholder='Search for a movie' onChange={(e) => setInputValue(e.target.value)} />\r\n        </div>\r\n        <div className='movies-grid mb-3'>\r\n            {items &&\r\n                items.filter(itemName => {\r\n                    if (searchCatg === 'movies') {\r\n                        if(inputValue === '') {\r\n                            return itemName;\r\n                        } else if (itemName.title.toLowerCase().includes(inputValue.toLowerCase())){\r\n                            return itemName\r\n                        }\r\n                    } else {\r\n                        if(inputValue === '') {\r\n                            return itemName;\r\n                        } else if (itemName.name.toLowerCase().includes(inputValue.toLowerCase())){\r\n                            return itemName\r\n                        }\r\n                    }\r\n\r\n                }).map((item, i) => (\r\n                    <MovieCard  key={i} item={item} category={props.category === 'movies' ? 'movie' : 'tv'} />\r\n                ))\r\n            }\r\n        </div>\r\n        { page < 500 ? \r\n            <Button btnstyle='btn--outlined' onClick={loadMore}>View More</Button> : \"\"\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MoviesGrid\r\n\r\n\r\n\r\n/* \r\n{items.map((item, i) => (\r\n                <MovieCard  key={i} item={item} category={props.category === 'movies' ? 'movie' : 'tv'} />\r\n            ))}\r\n\r\n*/ "]},"metadata":{},"sourceType":"module"}